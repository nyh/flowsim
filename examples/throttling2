# Test case for base table only, showing the old throttling algorithm
# which caps the number of background writes (here at 300).
# Three replicas with three different speeds.

# In the simulation, use ticks of 1/100000 second. This means, for
# example, that if we do 10,000 requests per second, we complete 0.1
# requests per tick.
hz = 100000.0

b1 = replica(1, 10000/hz, 0)
b2 = replica(2,  9000/hz, 0)
b3 = replica(3,  8000/hz, 0)

# coordinator sends requests to the three above replicas, uses consistency
# level 2, and the cjjlassic base-table throttling is configured with
# a maximum number of background writes 600.
c = coordinator(1, [b1, b2, b3], write_CL=2, max_background_writes=300)

# Run a client with fixed concurrency 50 against coordinator c, for one
# second. This generates a bunch of data files in out/ with various
# metrics.
workload_fixed_concurrency(c, 50, 1*hz)

# Generate nice graphs of the metrics we just generated.


# In the throughput graph, after an immediate burst of 50 writes with
# infinite throughput, we go down to speed 9000, at which two (CL)
# replicas can respond, and after the background queue reaches our limit
# (300) we begin to wait for all 3 replies and go down to speed 8000.
#
plot_throughput(hz, "out/2.png",
    "set yrange [0:11000]; set ytics 0,1000; set grid")

plot_background_writes(hz, c, "out/1.png",
    "set yrange [0:350]; set grid")
